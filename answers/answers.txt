--What are all the types of pokemon that a pokemon can have?

-- show which distinct this table has;
SELECT DISTINCT name
FROM types;


--  counter count the uniq types name
SELECT COUNT(name) AS NumberOfUniqueTypes
FROM types;

SELECT * FROM types;

----------------------

--What is the name of the pokemon with id 45?

-- answer 'Eevee '

SELECT * from pokemons
Where pokemons.id = '45';


-----------------------


--How many pokemon are there?

-- total numb is 656
SELECT COUNT(id) AS totalNumberOfPokemons
FROM pokemons;

------------------------

--How many types are there?
-- we have 18 types
SELECT COUNT(name) AS NumberOfUniqueTypes
FROM types;

------------------------


--How many pokemon have a secondary type?
--answer 316
SELECT COUNT(secondary_type) AS numberOfPoksWithSecondaryType
FROM pokemons
WHERE pokemons.secondary_type IS NOT NULL;


SELECT COUNT(id) AS NumberOfUniqueTypes
FROM pokemons;

------------------------


--What is each pokemon's primary type?
--maybe create a table which will display all pokemons and his type in string

-- this not create ,just show required data

SELECT p.id AS pokemon_id, p.name AS pokemon_name, t.name AS primary_type
FROM pokemons p
JOIN types t ON p.primary_type = t.id;


-------------------------


-- What is Rufflet's secondary type?

SELECT p.name AS pokemon_name , t.name AS secondary_type_name
FROM pokemons p
RIGHT JOIN TYPES t ON p.secondary_type = t.id
WHERE p.name = 'Rufflet';

+--------------+---------------------+
| pokemon_name | secondary_type_name |
+--------------+---------------------+
| Rufflet      | Flying              |
+--------------+---------------------+


---------------------------


--What are the names of the pokemon that belong to the trainer with trainerID 303?


-- create a new name of joined table - pokemon-name
-- we take a loop thru pokemons_trainer table and our variable get nale pt
-- we do join on column where pokTrainer_id = pokemon.id
-- and if the matching condition is true we will see  the  table we looking for
SELECT p.name AS pokemon_name
FROM pokemon_trainer pt
JOIN pokemons p ON pt.pokemon_id = p.id
WHERE pt.trainerID = 303;

+--------------+
| pokemon_name |
+--------------+
| Wailord      |
| Vileplume    |
+--------------+


----------------------------


-- How many pokemon have a secondary type Poison


--We select count method to count pokemons
-- which secondary type is = to 'Poison' and we tell to do this count inside pokemons table


SELECT COUNT(pokemons.secondary_type = 'Poison') AS poison_pokemons
FROM pokemons;

+-----------------+
| poison_pokemons |
+-----------------+
|             316 |
+-----------------+

-------------------------------


-- What are all the primary types and how many pokemon have that type?


SELECT t.name AS primary_pokemons_type ,COUNT(*) AS num_of_pokemons
FROM pokemons p
JOIN types t on p.primary_type = t.id
GROUP BY p.primary_type , t.name;

-- create a  primary_pokemons_type which mean a type - name of pokemon ,
-- than count all pokemons in pokemons table which have the same primary type
--join the table on colunm where pokemons primary type an type name match
-- than group by the name of primary type

+-----------------------+-----------------+
| primary_pokemons_type | num_of_pokemons |
+-----------------------+-----------------+
| Normal                |              90 |
| Water                 |              95 |
| Grass                 |              59 |
| Rock                  |              38 |
| Fire                  |              38 |
| Ground                |              29 |
| Poison                |              27 |
| Bug                   |              61 |
| Electric              |              35 |
| Dragon                |              22 |
| Steel                 |              19 |
| Dark                  |              24 |
| Fighting              |              25 |
| Psychic               |              38 |
| Ghost                 |              19 |
| Fairy                 |              14 |
| Ice                   |              22 |
| Flying                |               1 |
+-----------------------+-----------------+
18 rows in set (0.07 sec)


-------------------------------------------

--How many pokemon at level 100 does each trainer with at least one level 100 pokemone have?
 --(Hint: your query should not display a trainer)

 SELECT pt.trainerID, COUNT(*) AS level_of_pokemon
 FROM pokemon_trainer pt
 JOIN pokemons p ON pt.pokemon_id = p.id
 WHERE pt.pokelevel = 100
 GROUP BY pt.trainerID
 HAVING COUNT(*) >= 1;


-- we select pokk trainer via trainerID NEED to ad ',' before COUNT
--and loop over all table giving name of new desc table level_of_pokemons
--than we join pokemons p ON column which is = pok table  and  pokemon id number
--condition WHERE is = 100
--and than we group them all by pokemon trainer id
--nd when we counting we start our count from 1


 SELECT p.name AS pokemon_name, COUNT(*) AS num_of_level_100_pokemon
 FROM pokemon_trainer pt
 JOIN pokemons p ON pt.pokemon_id = p.id
 WHERE pt.pokelevel = 100
 GROUP BY  p.name
 HAVING COUNT(*) >= 1
 ORDER BY num_of_level_100_pokemon DESC;

 ---------------------------------------------------------

 --How many pokemon only belong to one trainer and no other?


 SELECT COUNT(*) AS num_of_pokemon_unique_to_one_trainer
 FROM (
     SELECT pokemon_id
     FROM pokemon_trainer
     GROUP BY pokemon_id
     HAVING COUNT(DISTINCT trainerID) = 1
 ) AS unique_pokemon;

 -- Select couter all and put it to new table num_of_pokemon_unique_to_one_trainer
 -- than we set out condition
 -- we select pokemon_id From pokemon_trainer and GROUP their COUNT in one sum  we can add only that
 -- when only one trainer has this kind of pokemon

 +--------------------------------------+
 | num_of_pokemon_unique_to_one_trainer |
 +--------------------------------------+
 |                                   14 |
 +--------------------------------------+


-----------------------------------------------------


--Sort the data by finding out which trainer has the strongest pokemon so that this will act as a ranking of strongest to weakest trainer.
-- You may interpret strongest in whatever way you want, but you will have to explain your decision.
-- I DONT NOW HOW TO SORT THEM CORRECTLLY

--CREATE NEW TABLE WITHI NEEDED PARAMETERS
CREATE TABLE sorted_pokemons (
     Pokemon_Name VARCHAR(100),
     Trainer_Name VARCHAR(100),
     Level INT,
     Primary_Type VARCHAR(100),
     Secondary_Type VARCHAR(100)
 );


SELECT p.name AS Pokemon_Name,
       t1.trainername AS Trainer_Name,
       pt.pokelevel AS Level,
       t2.name AS Primary_Type,
       t3.name AS Secondary_Type
FROM pokemon_trainer pt
JOIN pokemons p ON pt.pokemon_id = p.id
JOIN trainers t1 ON pt.trainerID = t1.trainerID
JOIN types t2 ON p.primary_type = t2.id
LEFT JOIN types t3 ON p.secondary_type = t3.id;

--SELECT ALL NEEDED FETURES FROM DIFFERENT TABLES